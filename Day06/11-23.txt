@ java.lang 패키지
- 기본적인 클래스를 담고 있고, import/ 상속 없이 클래스와 인터페이스를 사용 할 수 있다.

- java.lang 패캐지 종류

1. object : 자바 클래스의 최상위 클래스

모든 클래스가 생성될 때 상속하지 않아도 자동으로 상속받게 된다. 
클래스를 생성하면 object 클래스가 여러 메서드를 오버라이드 할 수 있게 된다.
1) equlas(): 
동등한 객체안에서 문자열을 비교한다.
2) hashCode(): 
데이터 관리 값중에 찾고자 하는 값을 입력한 후에 저장 된 위치를 해시코드로
반환 받는 객체마다 고유한 값을 저장한다.
- hashCode : 오버라이딩 된 객체의 식별 된 값 (new 객체) : 새로운 hash값
2-1) String str1 = "123" / String str2 = "123" ;
글자값으로 묶인 String 객체가 생긴다. hashCode와 identityHashCode 가 동일하다.

- identityHashCode : 오버라이딩이 되지 않은 객체의 주소값
2-2) String str1 = new String("123") / String str2 = new String("123")
(new String - 새로운 문자열 인스턴스 생성: 새로운 hash 값 생성)
(hashCode: 동일한 값 생성/ identityHashCode: 다르게 구성 된 값이 생성)

3) toString()
문자열을 저장하고 여러가지 정보를 얻을 때 사용하며, print문으로 객체를 출력 할 경우 
메서드가 자동으로 실행 되어서 객체의 정보 값을 반환 해 준다.(기본정보: 클래스이름@해시코드)
메서드를 재정의(오버라이딩) 해서 원하는 객체의 정보를 이해할수 있는 글자 값으로
쉽게 출력했다.
- class
인스턴스의 정보를 문자열(String)으로 제공하는 메서드
public String toString(){
	return getClass().getName()+"@"+Integer.toHexString(hashCode())
}


2. String : 문자열 처리하는 객체형 데이터 타입

-String 클래스 정의
String 클래스 = 데이터(char[]) + 메서드(문자열 관련)
1) 한번 생성된 String 인스턴스는 문자열을 읽어 올수만 있고 변경 할 수 없다.
final class String : 불변 클래스
2) 연산자를 이용해 문자열 결합은 매번 새로운 문자열을 생성한다. 가능한 결합 횟수를
줄이는 것이 좋다.(String 단점: StringBuffer() 가 보완해줌)

-String 클래스 문자열 만드는 방법
1) 문자열의 리터럴을 지정
String str1 = "abc";
존재하는 문자열 리터럴이 있으면 새롭게 생성하지 않고 기존의 인스턴스를 재사용

2) String 클래스 생성자 사용
String str2 = new String("abc");
new 연산자를 통해 새로운 인스턴스를 생성한다.

3) 등가비교연산자 ( == ) 비교
문자열 리터럴 : 동일한 인스턴스를 사용하기 때문에 true( 문자열이 같기 때문에 주소값이 동일 )
String 클래스의 생성자 : 서로 다른 인스턴스를 사용하기 때문에 false
참고) equals()는 String 클래스에서 오버라이딩 되었기 때문에 true를 반환
String 참조형을 이용한 인스턴스 객체의 값을 비교할수 있다.

4) String 클래스: (리터럴/ 공백)
4-1) 리터럴
-문자열 리터럴은 클래스 파일이 메모리에 올라갈때 JVM에 있는 상수 저장소(constant pool)에 저장된다.
-문자열 리터럴은 한번 생성하고 수정 할 수 없으니, 같은 문자열 리터럴은 공유해서 사용한다.
4-2) 공백(빈 문자여리 empty String)
-내용이 없는 문자열이고 길이가 0인 char 형 배열에 저장한다
-문자열이 초기화(Null대신 빈 문자열/ 유니코드대신 공백)

3. Stringbuffer/ StringBuilder : String 클래스와 달리 내용을 변경 할 수 있다.

(String : 새로운 배열을 생성->배열복사->새로운배열주소를 참조변수 저장)
내부적으로 문자열을 편집을 위한 버퍼(Buffer)를 가지고 있어 버퍼값을 늘려서 사용할 수 있다.
(버퍼의 기본 Size : 16->필요 할 때 마다가 지정가능)
append 함수를 이용해서 글자를 계속 늘려서 추가, 저장할 수 있다.
StringBuffer 인스턴스를 각자 생성해도 같은 값일 경우 같은 주소(hash)가 대입된다. 

Stringbuffer : 스레드 환경일 경우 안전하도록 동기화가 되어있다. 스레드 최적화
StringBuilder : 스레드 환경이 아닐경우 성능이 더 좋다.

4. Math(수학 공식): 

5. wrapper 클래스
1) 기본 자료형(int/ long/ double/ float...)을 데이터 객체형으로 표현한다.
8가지의 기본형을 객체로 다뤄야 할 때 사용하는 클래스이다.
2) 매개변수로 객체를 요구할 때/ 기본형 값이 아닌(형 변환) 참조형으로 저장 할 때 사용하거나 객체 간의
비교를 해야 할 때 사용한다.
3) 자바 SE9 버젼 이후에는 생성자가 폐기/  작은 메모리와 빠른 속도의 메서드를 이용 할 때
사용한다.

- 오토 박싱/ 언 박싱
박싱 : 기본 데이터 타입 -> wrapper 클래스로 변환한다.
언박싱 : wrapper 클래스 타입 -> 기본 데이터 타입 으로 변환.

6. Number

7. java.util 패키지 (data class/ calender class : 날짜와 시간)